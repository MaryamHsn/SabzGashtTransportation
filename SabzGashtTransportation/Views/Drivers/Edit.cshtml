@model SabzGashtTransportation.ViewModel.DriverViewModel

@{

    ViewBag.Title = "ویرایش راننده";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    @Styles.Render("~/css/css/style.css");
    var j = -1;
    Model.BankAccountNumbersReserve = new Sabz.DomainClasses.DTO.BankAccountNumberTbl[Model.Regiones.Count].ToList();
    //var bnkAccountTemp = new Sabz.DomainClasses.DTO.BankAccountNumberTbl();

}

<h2 class="style-h2">ویرایش راننده</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.DriverId)

        <div class="form-group">
            <p class="control-label">نام:</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <p class="control-label">نام خانوادگی:</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <p class="control-label">نام پدر:</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.FatherName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FatherName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <p class="control-label">کد ملی:</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.NationalCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NationalCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <p class="control-label">شماره گواهینامه:</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.LicenceCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LicenceCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <p class="control-label">تاریخ تولد:</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.BirthDateString, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BirthDateString, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <p class="control-label">اتومبیل:</p>
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.AutomobileId, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.AutomobileId, "", new { @class = "text-danger" })*@

                @Html.DropDownListFor(x => Model.AutomobileId, new SelectList(Model.Automobiles, "Id", "Number"), "انتخاب کنید", htmlAttributes: new { @class = "form-control", id = "DriverSelect" })
                @Html.ValidationMessageFor(x => x.AutomobileId, "", new { @class = "text-danger" })

            </div>
        </div>

        <div class="form-group">
            <p class="control-label">شماره حساب:</p>
            <div class="col-md-10">
                @*@for (int i = 0; i < Model.Regiones.Count(); i++)
        {
            @Html.DisplayFor(modelItem => modelItem.Regiones[i].RegionName)
            @Html.DisplayFor(modelItem => modelItem.Regiones[i].RegionId)
            if (Model.BankAccountNumbers[j].RegionId == Model.Regiones[i].RegionId)
            {
                @Html.EditorFor(m => m.BankAccountNumbers[j].BankAccountNumber);
                @Html.ValidationMessageFor(m => m.BankAccountNumbers[j].BankAccountNumber);
                var temp = Model.Regiones[@i].RegionId;
                <input type="hidden" name="BankAccountNumbers[@i].RegionId" value=@temp />
                j++;

            }
            else
            {

                var bnkAccountTemp = new Sabz.DomainClasses.DTO.BankAccountNumberTbl();
                Model.BankAccountNumbers.Add(bnkAccountTemp);
                @Html.EditorFor(m => m.BankAccountNumbers[j].BankAccountNumber);
                @Html.ValidationMessageFor(m => m.BankAccountNumbers[j].BankAccountNumber);
                var temp = Model.Regiones[@i].RegionId;
                <input type="hidden" name="BankAccountNumbers[@i].RegionId" value=@temp />
                j--;
            }

        }*@


                @for (int i = 0; i < Model.Regiones.Count(); i++)
                {
                    j++;

                    @Html.DisplayFor(modelItem => modelItem.Regiones[i].RegionName)
                    if ( j< Model.BankAccountNumbers.Count)
                    {
                        if (Model.BankAccountNumbers[j].RegionId == Model.Regiones[i].RegionId)
                        {
                            Model.BankAccountNumbersReserve[i] = Model.BankAccountNumbers[j];
                            @Html.EditorFor(m => m.BankAccountNumbersReserve[i].BankAccountNumber);
                            @Html.ValidationMessageFor(m => m.BankAccountNumbersReserve[i].BankAccountNumber);
                            var tempReg = Model.Regiones[@i].RegionId;
                            <input type="hidden" name="BankAccountNumbersReserve[@i].RegionId" value=@tempReg />

                        }
                        else
                        {

                            @Html.EditorFor(m => m.BankAccountNumbersReserve[i].BankAccountNumber);
                            @Html.ValidationMessageFor(m => m.BankAccountNumbersReserve[i].BankAccountNumber);
                            var tempReg = Model.Regiones[@i].RegionId;
                            <input type="hidden" name="BankAccountNumbersReserve[@i].RegionId" value=@tempReg />
                            j--;
                        }
                    }

                    else
                    {

                        
                            @Html.DisplayFor(modelItem => modelItem.Regiones[i].RegionName)
                            @Html.EditorFor(m => m.BankAccountNumbersReserve[i].BankAccountNumber);
                            @Html.ValidationMessageFor(m => m.BankAccountNumbersReserve[i].BankAccountNumber);
                            var temp = Model.Regiones[@i].RegionId;
                            <input type="hidden" name="BankAccountNumbers[@i].RegionId" value=@temp />
                        
                    }

                }
                @Html.ValidationMessageFor(model => model.BankAccountNumbers, "", new { @class = "text-danger" })


                @*@foreach (var item in Model.Regiones)
        {
            @for (int i = 0; i < Model.BankAccountNumbers.Count(); i++)
            {
                if (Model.BankAccountNumbers[i].RegionId == item.RegionId)
                {
                    @Html.EditorFor(m => m.BankAccountNumbers[i].BankAccountNumber);
                    @Html.ValidationMessageFor(m => m.BankAccountNumbers[i].BankAccountNumber);
                    var temp = item.RegionId;
                    <input type="hidden" name="BankAccountNumbers[@i].RegionId" value=@temp />
                    j++;

                }
            }

        }*@

            </div>
        </div>

        <div class="form-group">
            <p class="control-label">آدرس:</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <p class="control-label">موبایل:</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.Phone1, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Phone1, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <p class="control-label">تلفن:</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.Phone2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Phone2, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="submit" class="btn btn-success">ثبت</button>

            </div>
        </div>
    </div>
}

<div class="link-back">
    @Html.ActionLink("بازگشت به لیست", "Index")
</div>
